{"version":3,"sources":["components/Persons/Person/Person.module.css","components/ErrorBoundary/ErrorBoundary.js","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","ErrorBoundary","state","isError","errorMessage","error","this","setState","props","children","Component","Person","console","log","className","classes","onClick","click","name","age","Green","type","onChange","changed","value","Persons","nextProp","nextState","prevProp","prevState","map","person","index","clicked","key","id","event","Cockpit","dynamicClasses","length","push","join","toggleList","App","isPersonShow","val","nameSwitchHandler","newValue","nameChangeHandler","personIndex","findIndex","p","target","persons","deletePersonsHandler","personsIndex","personArr","splice","personComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.903e4a99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__2_l3Y\",\"Bold\":\"Person_Bold__ZoWxQ\",\"Green\":\"Person_Green__299X9\"};","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n    state = {\n        isError: false,\n        errorMessage: \"\"\n    }\n\n    componentDidCatch(error) {\n        this.setState({\n            isError: true,\n            errorMessage: error\n        })\n    };\n\n    render() {\n        if (this.state.isError) {\n            return (\n                <>\n                    <h1>Something went wrong</h1>\n                    <h2>Error Message: {this.state.errorMessage}</h2>\n                </>\n            )\n        } else return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react'\nimport classes from './Person.module.css'\nimport ErrorBoundary from '../../ErrorBoundary/ErrorBoundary';\n\nclass Person extends Component {\n\n    componentDidMount(){\n        console.log(\"[Person.js] component did mount\")\n    }\n    render() {\n        return (\n            <ErrorBoundary>\n                <div className={classes.Person}>\n                    <p onClick={this.props.click}> Hi I am a <strong>{this.props.name}</strong> and Age is {this.props.age}</p>\n                    <p className={classes.Green}>{this.props.children} testing</p>\n                    <input type=\"text\" onChange={this.props.changed} value={this.props.name} />\n                </div>\n            </ErrorBoundary>\n        )\n    }\n}\n\nexport default Person","import React, { Component } from 'react'\nimport Person from './Person/Person';\n\nclass Persons extends Component  {\n\n    // static getDerivedStateFromProps(props, state){\n    //     console.log(\"[persons.js] geteDerivedStateFromProps\")\n    //     return state\n    // }\n\n    shouldComponentUpdate(nextProp, nextState){\n        console.log(\"[persons.js] shouldComponentUpdate\")        \n        return true;\n    }\n\n    getSnapshotBeforeUpdate(prevProp, prevState){\n        console.log(\"[persons.js] getSnapshotBeforeUpdate\")        \n        return true;\n    }\n\n    componentDidUpdate(){\n        console.log(\"[persons.js] componentDidUpdate\")        \n        \n    }\n\n    render(){\n        console.log(\"[persons.js ] rendering...\")    \n         return this.props.Person.map((person, index) => {\n            return <Person\n              \n              name={person.name}\n              age={person.age}\n              click={() => this.props.clicked(index)}\n              key={person.id} \n              changed= {(event) => this.props.changed(event, person.id)}/>\n          })\n        }\n    }\n\nexport default Persons;","import React from 'react'\n\nconst Cockpit = (props) => {\n    let dynamicClasses = [];\n    if(props.Person.length >=1 ){\n      dynamicClasses.push(\"red\")\n    }\n\n    if(props.Person.length >=2 ){\n      dynamicClasses.push(\"bold\")\n    }\n\n    return (\n        <div>\n            <h1 className={dynamicClasses.join(\" \")}>testing</h1>\n            <button\n                className=\"ButtonClass\"\n                onClick={props.toggleList}>Switch</button>\n        </div>\n    )\n}\n\nexport default Cockpit;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\n\nclass App extends Component {\n  state = {\n    Person: [\n      { id:\"asdf1\", name: \"deepak\", age: 24 },\n      { id:\"asdf2\", name: \"naha\", age: 23 },\n      { id:\"asdf3\", name: \"someone\", age: 20 }\n    ],\n    isPersonShow: false\n  }\n\n  toggleList = () => {\n    let val = this.state.isPersonShow;\n    this.setState({\n      isPersonShow: !val\n    })\n  }\n\n  nameSwitchHandler = (newValue) => {\n    this.setState({\n      Person: [\n        { name: \"deepak new\", age: 25 },\n        { name: \"naha\", age: 23 },\n        { name: newValue, age: 50 }\n      ]\n    })\n  }\n\n  nameChangeHandler = (event, id) => {\n    let personIndex = this.state.Person.findIndex(p => p.id === id);\n    \n    if(personIndex != null){\n      let person = {\n        ...this.state.Person[personIndex]\n      }\n      console.log(\"asdfasd\", this.state, person);\n      \n   \n      person.name = event.target.value;\n\n      let persons = [...this.state.Person];\n\n      persons[personIndex] = person;\n      \n      this.setState({\n        Person: persons\n      })\n    }\n  }\n\n\n  deletePersonsHandler = (personsIndex) => {\n    let personArr = [...this.state.Person]\n    personArr.splice(personsIndex, 1);\n    this.setState({ Person: personArr })\n  }\n\n\n\n  render() {\n   \n    console.log('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$')\n    console.log(\"Rendering.....\")\n    console.log(\"State \", this.state)\n\n    let personComponent = null;\n\n    if (this.state.isPersonShow) {\n      personComponent = (\n        <Persons \n        Person = {this.state.Person}\n        clicked = {this.deletePersonsHandler}\n        changed={this.nameChangeHandler}/>\n      )\n    }\n\n    \n\n    return (\n      <div className=\"App\">\n        <Cockpit toggleList = {this.toggleList} Person = {this.state.Person}/>\n        {personComponent}\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}